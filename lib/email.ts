import nodemailer from 'nodemailer';

// C·∫•u h√¨nh email transporter
// Trong production, s·ª≠ d·ª•ng service th·∫≠t nh∆∞ Gmail, SendGrid, etc.
const transporter = nodemailer.createTransport({
  // C·∫•u h√¨nh cho Gmail SMTP
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER || 'your-email@gmail.com',
    pass: process.env.EMAIL_PASSWORD || 'your-app-password',
  },
  // Ho·∫∑c c·∫•u h√¨nh SMTP t√πy ch·ªânh:
  // host: process.env.SMTP_HOST,
  // port: parseInt(process.env.SMTP_PORT || '587'),
  // secure: false,
  // auth: {
  //   user: process.env.SMTP_USER,
  //   pass: process.env.SMTP_PASSWORD,
  // },
});

/**
 * G·ª≠i email x√°c th·ª±c t√†i kho·∫£n
 */
export async function sendVerificationEmail(email: string, verificationToken: string): Promise<boolean> {
  try {
    // URL x√°c th·ª±c - trong production thay ƒë·ªïi domain
    const verificationUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/auth/verify?token=${verificationToken}`;
    
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@yourapp.com',
      to: email,
      subject: 'X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n',
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
          <h2 style="color: #333; text-align: center;">X√°c th·ª±c t√†i kho·∫£n</h2>
          <p>Ch√†o b·∫°n,</p>
          <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n. Vui l√≤ng click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ x√°c th·ª±c email c·ªßa b·∫°n:</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${verificationUrl}" 
               style="background-color: #007bff; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              X√°c th·ª±c t√†i kho·∫£n
            </a>
          </div>
          <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
          <p style="word-break: break-all; color: #666;">${verificationUrl}</p>
          <p style="color: #666; font-size: 14px; margin-top: 30px;">
            Link n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù. N·∫øu b·∫°n kh√¥ng ƒëƒÉng k√Ω t√†i kho·∫£n n√†y, vui l√≤ng b·ªè qua email n√†y.
          </p>
        </div>
      `,
    };

    // // Trong development, ch·ªâ log email thay v√¨ g·ª≠i th·∫≠t
    // if (process.env.NODE_ENV === 'development') {
    //   console.log('üìß Mock Email Sent:');
    //   console.log('To:', email);
    //   console.log('Subject:', mailOptions.subject);
    //   console.log('Verification URL:', verificationUrl);
    //   return true;
    // }

    // Trong production, g·ª≠i email th·∫≠t
    await transporter.sendMail(mailOptions);
    console.log('Verification email sent to:', email);
    return true;
  } catch (error) {
    console.error('Error sending verification email:', error);
    return false;
  }
}

/**
 * G·ª≠i email reset m·∫≠t kh·∫©u
 */
export async function sendResetPasswordEmail(email: string, resetToken: string): Promise<boolean> {
  try {
    // URL reset m·∫≠t kh·∫©u
    const resetUrl = `${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/auth/reset-password?token=${resetToken}`;
    
    const mailOptions = {
      from: process.env.EMAIL_FROM || 'noreply@yourapp.com',
      to: email,
      subject: 'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
      html: `
        <div style="max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif;">
          <h2 style="color: #333; text-align: center;">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          <p>Ch√†o b·∫°n,</p>
          <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n c·ªßa b·∫°n. Click v√†o link b√™n d∆∞·ªõi ƒë·ªÉ t·∫°o m·∫≠t kh·∫©u m·ªõi:</p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${resetUrl}" 
               style="background-color: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; display: inline-block;">
              ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
            </a>
          </div>
          <p>Ho·∫∑c copy v√† paste link sau v√†o tr√¨nh duy·ªát:</p>
          <p style="word-break: break-all; color: #666;">${resetUrl}</p>
          <p style="color: #666; font-size: 14px; margin-top: 30px;">
            Link n√†y s·∫Ω h·∫øt h·∫°n sau 1 gi·ªù. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.
          </p>
        </div>
      `,
    };


    // Trong production, g·ª≠i email th·∫≠t
    await transporter.sendMail(mailOptions);
    console.log('Reset password email sent to:', email);
    return true;
  } catch (error) {
    console.error('Error sending reset password email:', error);
    return false;
  }
}